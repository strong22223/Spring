<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 第一天
            1.基础配置：将IOC的容器配置好，并且配置引用变量
            2.别名的配置:name
            3.这作用范围的配置scope:prototype(多个)
            4.Spring创建Bean的时间是通过
                * 无参构造方法来啊创建的
                * 静态工厂实例化
                    # 自定义工厂
                    # 通过Spring的工厂来实例化对象
                    # 通过Spring来管理FactoryBean来实现对 对象的实例化
    ##########################################################################################################################################-->
    <bean id="bookDao" class="com.strong.dao.impl.BookDaoImpl" scope="singleton"/>

    <bean id="bookService" class="com.strong.service.impl.BookServiceImpl">
        <property name="bookDao" ref="bookDao"/>

    </bean>

    <!--            承接上文
                     * 静态工厂实例化-->
    <!--             # 自定义工厂-->
    <!--             # 通过Spring的工厂来实例化对象-->
    <!--    ##########################################################################################################################################-->
    <bean id="orderDao" class="com.strong.factory.OrderDaoFactory" factory-method="getOrderDaoImpl" scope="prototype"/>
    <!--    承接上文-->
    <!--    * 通过Spring来管理Factory来实现工厂实例化&ndash;&gt;-->
    <!--             # 自定义工厂-->
    <!--             # 通过Spring的工厂来实例化对象,必须通过实现接口
    -->
    <!--    ##########################################################################################################################################-->

    <bean id="userDaoFactory" class="com.strong.factory.UserDaoFactory"/>
    <bean id="userDao1" factory-method="getUserDao" factory-bean="userDaoFactory"/>
    <!--    ##########################################################################################################################################-->
    <bean id="userDao2" class="com.strong.factory.UserBeanFactoryBean"/>
    <!--    ##########################################################################################################################################
                Bean的生命周期 example:参考BookDao将其使用
                    在配置文件中创建Bean的生命周期相关的文件
                        id class init-method
    -->
    <bean id="lifeCycle" class="com.strong.service.impl.LifeCycleBeanImpl" init-method="init" destroy-method="destroy">
        <property name="bookDao" ref="bookDao"/>
    </bean>
    <!--    ##########################################################################################################################################
            Di
                Setter 注入
                    * 引用类型 name ref
                    * 普通类型注入 name value
                        Spring 会自动 更改参数的类型
                构造器  注入
                    * 引用类型 name ref
                         #constructor-arg
                            :name ref
                    * 普通类型注入
                         #name value
                在注入的时间:{

                通过 \ 类名 \ type \ index\

                1. 强制依赖使用构造器进行，使用setter注入有概率不进行注入导致null对象出现
                    * 强制依赖指对象在创建的过程中必须要注入指定的参数
                2. 可选依赖使用setter注入进行，灵活性强
                   * 可选依赖指对象在创建过程中注入的参数可有可无
                3. Spring框架倡导使用构造器，第三方框架内部大多数采用构造器注入的形式进行数据初始化，相对严谨
                4. 如果有必要可以两者同时使用，使用构造器注入完成强制依赖的注入，使用setter注入完成可选依赖的注入
                5. 实际开发过程中还要根据实际情况分析，如果受控对象没有提供setter方法就必须使用构造器注入
                6. **==自己开发的模块推荐使用setter注入==**


    -->


</beans>